{
    "Playwright import": {
        "prefix": "m-imp",
        "description": "Imports Playwright's test libraries",
        "body": [
            "",
            "import { test } from '@playwright/test';",
            "import { Team } from '@paeng/playwright-teams-info';",
            "import {",
            "EnvironmentType,",
            "integrationTest,",
            "RunEnvironment,",
            "RunGeo,",
            "RunType,",
            "Severity,",
            "} from '@paeng/playwright-solution';",
            ""
        ]
    },
    "Playwright describe block": {
        "prefix": "p-td",
        "description": "Playwright describe block",
        "body": [
            "test.describe('$1', () => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test()": {
        "prefix": "p-t",
        "description": "Playwright test block",
        "body": [
            "test('$1', async ({ ${2:page} }) => {",
            "\t$3",
            "});",
            ""
        ]
    },
    "Playwright integrationTest block": {
        "prefix": "m-int",
        "description": "Playwright integrationTest wrapper function block",
        "body": [
            "integrationTest(",
            "    {",
            "      envTypes: [EnvironmentType.MakerShell],",
            "      runTypes: [RunType.Nightly],",
            "      runEnvironments: [[RunEnvironment.Test, Severity.S3]],",
            "      runGeos: [RunGeo.USA],",
            "    },",
            "    Team.${1|TableDesigner,ViewDesigner|},",
            "    '${2:title}',",
            "    async ({ page }) => {",
            "       ${3:testSteps}",
            "    });"
        ]
    },
    "test.step()": {
        "prefix": "p-ts",
        "description": "Playwright test.step block",
        "body": [
            "await test.step('${1:title}', async () => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.beforeEach()": {
        "prefix": "p-tbe",
        "description": "Playwright beforeEach block",
        "body": [
            "test.beforeEach(async ({ ${1:page} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.afterEach()": {
        "prefix": "p-tae",
        "description": "Playwright afterEach block",
        "body": [
            "test.afterEach(async ({ ${1:page} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.beforeAll()": {
        "prefix": "p-tba",
        "description": "Playwright beforeAll block",
        "body": [
            "test.beforeAll(async ({ ${1:browser} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.afterAll()": {
        "prefix": "p-taa",
        "description": "Playwright afterAll block",
        "body": [
            "test.afterAll(async ({ ${1:browser} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "page.click()": {
        "prefix": "p-clk",
        "body": "await this.page.locator('${0:selector}').click();",
        "description": "Clicks in the center of an element within the page"
    },
    "Click Selector": {
        "prefix": "m-clks",
        "description": "clicks selector util",
        "body": [
            "await clickSelector(this.page, ${1:selector});"
        ]
    },
    "page.dblclick()": {
        "prefix": "p-dbclk",
        "body": "await page.dblclick('$0');",
        "description": "Clicks twice in the center of an element within the page"
    },
    "page.nth().click()": {
        "prefix": "p-clki",
        "description": "clicks selector",
        "body": [
            "await this.page.locator(${1:selector}).nth(${2:index}).click();"
        ]
    },
    "precise click with index": {
        "prefix": "m-pclk",
        "description": "clicks selector util",
        "body": [
            "await preciseClick(this.page, ${1:selector}, { index: ${2:index} });"
        ]
    },
    "Navigate to Url": {
        "prefix": "m-ntu",
        "description": "navigates to the url util",
        "body": [
            "await navigateToUrl(this.page, ${1:url});"
        ]
    },
    "page.title()": {
        "prefix": "p-title",
        "description": "Returns the page's title",
        "body": [
            "await this.page.title();"
        ]
    },
    "Verify page url": {
        "prefix": "m-vpurl",
        "description": "Verify page url util",
        "body": [
            "await verifyPageURL(this.page, ${1:url});"
        ]
    },
    "page.url()": {
        "prefix": "p-url",
        "body": "await this.page.url();",
        "description": "Returns the page's URL"
    },
    "publicAsyncMethod()": {
        "prefix": "p-pam",
        "description": "Playwright asynchronous method for class",
        "body": [
            "public async ${1:name}($2) {$3}"
        ]
    },
    "page.toBeVisible()": {
        "prefix": "p-etbv",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeVisible();"
        ]
    },
    "page.toBeHidden()": {
        "prefix": "p-etbh",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeHidden();"
        ]
    },
    "page.toBeEnabled()": {
        "prefix": "p-etbe",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeEnabled();"
        ]
    },
    "page.toBeDisabled()": {
        "prefix": "p-etbd",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeDisabled();"
        ]
    },
    "page.toBeChecked()": {
        "prefix": "p-etbc",
        "description": "Playwright expect to be checked",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeChecked();"
        ]
    },
    "expect.toBe()": {
        "prefix": "p-etb",
        "description": "Playwright expect something to be something",
        "body": [
            "expect($1).toBe($2);"
        ]
    },
    "page.waitFor()": {
        "prefix": "p-wf",
        "description": "Playwright wait for",
        "body": [
            "await this.page.locator(${1:selector}).waitFor($2);"
        ]
    },
    "page.waitForSelector()": {
        "prefix": "p-wfs",
        "description": "Playwright waitForSelector",
        "body": [
            "await this.page.waitForSelector(${0:selector});"
        ]
    },
    "page.waitForLoadState()": {
        "prefix": "p-wfls",
        "description": "Playwright waitForLoad",
        "body": [
            "await this.page.waitForLoadState();"
        ]
    },
    "page.waitForTimeout()": {
        "prefix": "p-wft",
        "description": "Playwright waitForTimeout",
        "body": [
            "await this.page.waitForTimeout(Timeout.$1);"
        ]
    },
    "page.waitForEvent()": {
        "prefix": "p-wfe",
        "body": "await this.page.waitForEvent($0);",
        "description": "Waits until an event within the page is fired"
    },
    "page.waitForFunction()": {
        "prefix": "p-wff",
        "body": "await this.page.waitForFunction($0);",
        "description": "Waits until a predicate within the page returns a truthy value"
    },
    "page.waitForNavigation()": {
        "prefix": "p-wfn",
        "body": "await this.page.waitForNavigation();",
        "description": "Waits until the page navigates to a new URL or reloads"
    },
    "page.waitForRequest()": {
        "prefix": "p-wfreq",
        "body": "await this.page.waitForRequest($0);",
        "description": "Waits until a request by URL/predicate is resolved"
    },
    "page.waitForResponse()": {
        "prefix": "p-wfres",
        "body": "await this.page.waitForResponse($0);",
        "description": "Waits until a response by URL/predicate is resolved"
    },
    "A11y check": {
        "prefix": "m-a11y",
        "description": "Playwright a11y check util",
        "body": [
            "if (a11yCheck) {",
            "  await a11y(this.page);",
            "}"
        ]
    },
    "page.fill()": {
        "prefix": "p-fill",
        "description": "Playwright fill input",
        "body": [
            "await this.page.fill(${1:selector}, ${2:value});"
        ]
    },
    "page.type()": {
        "prefix": "p-type",
        "description": "Playwright type input",
        "body": [
            "await this.page.type(${1:selector}, ${2:value});"
        ]
    },
    "fill value in controls": {
        "prefix": "m-fill",
        "description": "Fill value in control util",
        "body": [
            "await fillValueInControl(this.page, ${1:inputSelector}, ${2:value});"
        ]
    },
    "page.isVisible()": {
        "prefix": "p-isv",
        "description": "Selector is visble?",
        "body": [
            "await this.page.locator(${1:selector}).isVisible();"
        ]
    },
    "page.isHidden()": {
        "prefix": "p-ish",
        "description": "Selector is hidden?",
        "body": [
            "await this.page.locator(${1:selector}).isHidden();"
        ]
    },
    "page.isChecked()": {
        "prefix": "p-isc",
        "description": "Selector is checked?",
        "body": [
            "await this.page.locator(${1:selector}).isChecked();"
        ]
    },
    "page.isEnabled()": {
        "prefix": "p-isen",
        "description": "Selector is enabled?",
        "body": [
            "await this.page.locator(${1:selector}).isEnabled();"
        ]
    },
    "page.isDisabled()": {
        "prefix": "p-isd",
        "description": "Selector is diabled?",
        "body": [
            "await this.page.locator(${1:selector}).isDisabled();"
        ]
    },
    "page.isEditable()": {
        "prefix": "p-ised",
        "description": "Selector is editable?",
        "body": [
            "await this.page.locator(${1:selector}).isEditable();"
        ]
    },
    "page.check()": {
        "prefix": "p-chk",
        "description": "Check the selector",
        "body": [
            "await this.page.locator(${1:selector}).check();"
        ]
    },
    "page.uncheck()": {
        "prefix": "p-uchk",
        "description": "Check the selector",
        "body": [
            "await this.page.locator(${1:selector}).uncheck();"
        ]
    },
    "Navigate to new page/tab": {
        "prefix": "p-newPage",
        "description": "Navigate to new tab",
        "body": [
            "const [${2:newPage}] = await Promise.all([",
            "\tcontext.waitForEvent('page'),",
            "\tpage.click(${1:selector})",
            "])",
            "await newPage.waitForLoadState();"
        ]
    },
    "Navigate to new popup": {
        "prefix": "p-newPopup",
        "description": "Navigate to new tab",
        "body": [
            "const [${2:newPopup}] = await Promise.all([",
            "\tthis.page.waitForEvent('popup'),",
            "\tthis.page.click(${1:selector})",
            "])",
            "await newPage.waitForLoadState();"
        ]
    },
    "page.getAttribute()": {
        "prefix": "p-getattr",
        "description": "Get values of element attribute",
        "body": [
            "await this.page.locator(${1:selector}).getAttribute('$2');"
        ]
    },
    "page.innerText()": {
        "prefix": "p-itxt",
        "description": "Get values of element inner text",
        "body": [
            "await this.page.locator(${1:selector}).innerText();"
        ]
    },
    "page.count()": {
        "prefix": "p-count",
        "description": "Get elements count",
        "body": [
            "await this.page.locator(${1:selector}).count();"
        ]
    },
    "test.use()": {
        "prefix": "p-tuse",
        "description": "test.use()",
        "body": [
            "test.use({ $0 });"
        ]
    },
    "browser.newContext()": {
        "prefix": "p-b-newContext",
        "body": "const ${1:context} = await browser.newContext();",
        "description": "Creates a new browser context"
    },
    "browser.newPage()": {
        "prefix": "p-b-newPage",
        "body": "const ${1:page} = await browser.newPage();",
        "description": "Creates a new page in a new browser context"
    },
    "context.newPage()": {
        "prefix": "p-context-newPage",
        "body": "const ${1:page} = await context.newPage();",
        "description": "Creates a new page in the browser context"
    },
    "context.pages()": {
        "prefix": "p-context-pages",
        "body": "await context.pages();",
        "description": "Returns all pages of the browser context"
    },
    "page.focus()": {
        "prefix": "p-focus",
        "body": "await this.page.focus('$0');",
        "description": "Focuses an element within the page"
    },
    "page.goBack()": {
        "prefix": "p-goBack",
        "body": "await this.page.goBack();",
        "description": "Navigates to the previous page in the history"
    },
    "page.goForward()": {
        "prefix": "p-goFwd",
        "body": "await this.page.goForward();",
        "description": "Navigates to the next page in the history"
    },
    "page.goto()": {
        "prefix": "p-goto",
        "body": "await this.page.goto('$0');",
        "description": "Navigates the page to a URL"
    },
    "POM Class": {
        "prefix": "m-pom",
        "description": "Playwright Page Object Model (POM) class structure",
        "body": [
            "import { Page } from '@playwright/test';",
            "",
            "import { navigateToUrl } from '@paeng/playwright-solution';",
            "",
            "export class ${1:ClassName} {",
            "  readonly page: Page;",
            "",
            "  constructor(page: Page) {",
            "    this.page = page;",
            "  }",
            "",
            "  public async ${2:methodName}() {}",
            "",
            "}"
        ]
    },
    "POM Class with extend class": {
        "prefix": "m-pome",
        "description": "Playwright Page Object Model (POM) class structure with extended class",
        "body": [
            "import { Page } from '@playwright/test';",
            "",
            "import { navigateToUrl } from '@paeng/playwright-solution';",
            "",
            "export class ${1:ClassName} extends ${2:extendClassName} {",
            "  constructor(page: Page) {",
            "    super(page);",
            "  }",
            "",
            "  public async ${3:methodName}() {}",
            "",
            "}"
        ]
    },
    "page.hover": {
        "prefix": "p-hover",
        "description": "Playwright page.hover()",
        "body": [
            "await this.page.locator(${1:selector}).hover();"
        ]
    },
    "page.setInputFiles": {
        "prefix": "p-sif",
        "description": "Playwright page.setInputFiles",
        "body": [
            "await this.page.locator(${1:selector}).setInputFiles(${1:inputFilePath});"
        ]
    },
    "page.selectOption": {
        "prefix": "p-so",
        "description": "Playwright page.selectOption",
        "body": [
            "await this.page.locator(${1:selector}).selectOption(${1:option});"
        ]
    },
    "expect.toHaveTitle": {
        "prefix": "p-etht",
        "description": "Playwright expect to have given title string",
        "body": [
            "await expect(${1:this.page}).toHaveTitle(${2:title});"
        ]
    },
    "expect.toContainText": {
        "prefix": "p-etctxt",
        "description": "Playwright expect to contain text",
        "body": [
            "await expect(${1:this.page}).toContainText(${2:text});"
        ]
    },
    "expect.toHaveAttribute": {
        "prefix": "p-ethattr",
        "description": "Playwright expect to have attribute",
        "body": [
            "await expect(${1:this.page}).toHaveAttribute(${2:attribute});"
        ]
    },
    "expect.toHaveCount": {
        "prefix": "p-ethc",
        "description": "Playwright expect given selector resolves to given count",
        "body": [
            "await expect(${1:this.page}).toHaveCount(${2:count});"
        ]
    },
    "expect.toHaveText": {
        "prefix": "p-ethtxt",
        "description": "Playwright expect to have text",
        "body": [
            "await expect(${1:this.page}).toHaveText(${2:text});"
        ]
    },
    "expect.toHaveURL": {
        "prefix": "p-ethURL",
        "description": "Playwright expect page to have URL",
        "body": [
            "await expect(${1:this.page}).toHaveURL(${2:text});"
        ]
    },
    "expect.toHaveScreenshot": {
        "prefix": "p-ethss",
        "description": "Playwright expect page to have screenshot",
        "body": [
            "await expect(${1:this.page}).toHaveScreenshot();"
        ]
    },
    "page.getByText": {
        "prefix": "p-get-txt",
        "description": "Playwright locate by text content",
        "body": [
            "await this.page.getByText(${1:text});"
        ]
    },
    "page.getByRole": {
        "prefix": "p-get-r",
        "description": "Playwright locate by ARIA role, ARIA attributes and accessible name.",
        "body": [
            "await this.page.getByRole($1);"
        ]
    },
    "page.getByLabel": {
        "prefix": "p-get-l",
        "description": "Playwright locate a form control by associated label's text",
        "body": [
            "await this.page.getByLabel($1);"
        ]
    },
    "page.getByTestId": {
        "prefix": "p-get-ti",
        "description": "Playwright locate an element based on its data-testid attribute",
        "body": [
            "await this.page.getByTestId($1);"
        ]
    },

    "page.getByPlaceholder": {
        "prefix": "p-get-p",
        "description": "Playwright locate an input by placeholder",
        "body": [
            "await this.page.getByPlaceholder($1);"
        ]
    },
    "page.getByAltText": {
        "prefix": "p-get-atxt",
        "description": "Playwright locate an element, usually image, by its text alternative.",
        "body": [
            "await this.page.getByAltText($1);"
        ]
    },
    "page.getByTitle": {
        "prefix": "p-get-title",
        "description": "Playwright ",
        "body": [
            "await this.page.getByTitle($1);"
        ]
    },
    "page.locate": {
        "prefix": "p-locator",
        "description": "Playwright page locator",
        "body": [
            "const ${1:locator} = await this.page.locator('${2:selector}');"
        ]
    },
    "Complete test block": {
        "prefix": "p-testBlock",
        "description": "Playwright full test block",
        "body": [
            "test.describe(() => {",
                "test.use({ colorScheme: 'dark'});",

                "test('one', async ({ page}) => {",
                  "${1:codeBlock}",
                "});",
            "});"
        ]
    },
    "Playwright save HAR file": {
        "prefix": "p-saveHAR",
        "description": "Playwright save HAR file",
        "body": [
            "const context = await browser.newContext({",
                "recordHar: { path: '${1:harFile.har.zip}'",
                "}",
            "});"
        ]
    },
    "page.route": {
        "prefix": "p-route",
        "description": "Playwright sample route snippet",
        "body": [
            "await this.page.route('${1:**/*}', async route => {",
                "const headers = await route.request().allHeaders();",
                "delete headers['if-none-match'];",
                "route.fallback({ headers });",
            "});"
        ]
    },
    "Full page screenshot": {
        "prefix": "p-screenshot-full",
        "description": "Playwright Full page screenshots",
        "body": [
            "await this.page.screenshot({ path: '${2:page.png}', fullPage: '${3|true,false|}' });"
        ]
    },
    "Element screenshot": {
        "prefix": "p-screenshot-element",
        "description": "Playwright Full page screenshots",
        "body": [
            "await this.page.locator(${1:selector}).screenshot({ path: '${2:screenshot.png}' });"
        ]
    },
    "Playwright module": {
        "prefix": "p-i-pw",
        "body": "const playwright = require('playwright');",
        "description": "Imports Playwright's full module"
    },
    "Import Chromium": {
        "prefix": "p-i-chromium",
        "body": "const { chromium } = require('playwright');",
        "description": "Imports Playwright's Chromium module"
    },
    "Import Firefox": {
        "prefix": "p-i-firefox",
        "body": "const { firefox } = require('playwright');",
        "description": "Imports Playwright's Firefox module"
    },
    "Import Webkit": {
        "prefix": "p-i-webkit",
        "body": "const { webkit } = require('playwright');",
        "description": "Imports Playwright's Webkit module"
    },
    "Import devices": {
        "prefix": "p-i-devices",
        "body": "const { devices } = require('playwright');",
        "description": "Imports the device descriptors module"
    },
    "Connect Chromium": {
        "prefix": "p-connect-chromium",
        "body": [
            "const ${1:browser} = await chromium.connect({",
            "\twsEndpoint: '$0'",
            "});"
        ],
        "description": "Attaches Playwright to an existing Chromium instance"
    },
    "Launch Chromium": {
        "prefix": "p-l-chromium",
        "body": "const ${1:browser} = await chromium.launch($0);",
        "description": "Creates a Chromium instance and attaches Playwright to it"
    },
    "Launch Chromium Server": {
        "prefix": "p-ls-chromium",
        "body": "const ${1:browserServer} = await chromium.launchServer();",
        "description": "Creates a Chromium server instance the client can connect to"
    },
    "Connect Firefox": {
        "prefix": "p-connect-firefox",
        "body": [
            "const ${1:browser} = await firefox.connect({",
            "\twsEndpoint: '$0'",
            "});"
        ],
        "description": "Attaches Playwright to an existing Firefox instance"
    },
    "Launch Firefox": {
        "prefix": "p-l-firefox",
        "body": "const ${1:browser} = await firefox.launch($0);",
        "description": "Creates a Firefox instance and attaches Playwright to it"
    },
    "Launch Firefox Server": {
        "prefix": "p-ls-firefox",
        "body": "const ${1:browserServer} = await firefox.launchServer();",
        "description": "Creates a Firefox server instance the client can connect to"
    },
    "Connect Webkit": {
        "prefix": "p-connect-webkit",
        "body": [
            "const ${1:browser} = await webkit.connect({",
            "\twsEndpoint: '$0'",
            "});"
        ],
        "description": "Attaches Playwright to an existing Webkit instance"
    },
    "Launch Webkit": {
        "prefix": "p-l-webkit",
        "body": "const ${1:browser} = await webkit.launch($0);",
        "description": "Creates a Webkit instance and attaches Playwright to it"
    },
    "Launch Webkit Server": {
        "prefix": "p-ls-webkit",
        "body": "const ${1:browserServer} = await webkit.launchServer();",
        "description": "Creates a Webkit server instance the client can connect to"
    },
    "browser.contexts": {
        "prefix": "p-b-contexts",
        "body": "browser.contexts();",
        "description": "Returns an array of all open browser contexts"
    },
    "browser.close": {
        "prefix": "p-b-close",
        "body": "await browser.close();",
        "description": "Closes the browser and all of its pages when it's launched, or clears all created contexts belonging to this browser and disconnects from the browser server when it's connected to"
    },
    "browser.isConnected": {
        "prefix": "p-b-isConnected",
        "body": "browser.isConnected();",
        "description": "Indicates that the browser is connected"
    },
    "browser.version": {
        "prefix": "p-b-version",
        "body": "browser.version();",
        "description": "Returns the browser version"
    },
    "browser.on('disconnected')": {
        "prefix": "p-b-on-disconnected",
        "body": [
            "browser.on('disconnected', () => {",
            "\t$0",
            "});"
        ],
        "description": "Emitted when the browser gets disconnected from the browser application"
    },
    "browserContext.close": {
        "prefix": "p-bc-close",
        "body": "await context.close();",
        "description": "Closes the browser context including all of its pages"
    },
    "browserContext.cookies": {
        "prefix": "p-bc-cookies",
        "body": "await context.cookies();",
        "description": "Returns all cookies of the browser context"
    },
    "browserContext.route": {
        "prefix": "p-bc-route",
        "body": "await context.route('$1', ${2:route} => {$0});",
        "description": "Modifies the network request that made by any page within the browser context"
    },
    "browserContext.unroute": {
        "prefix": "p-bc-unroute",
        "body": "await context.unroute('$0');",
        "description": "Removes registered route of a page withing the browser context"
    },
    "browserContext.on('close')": {
        "prefix": "p-bc-on-close",
        "body": [
            "context.on('close', () => {",
            "\t$0",
            "});"
        ],
        "description": "Emitted when the browser context is closed (manually or when the browser application is crashed)"
    },
    "browserContext.on('page')": {
        "prefix": "p-bc-on-page",
        "body": [
            "context.on('page', () => {",
            "\t$0",
            "});"
        ],
        "description": "Emitted when a page is created within the browser context"
    },
    "browserServer.close": {
        "prefix": "p-bs-close",
        "body": "await browserServer.close();",
        "description": "Closes the browser and makes sure the process is terminated"
    },
    "browserServer.kill": {
        "prefix": "p-bs-kill",
        "body": "await browserServer.kill();",
        "description": "Kills the browser process and waits until the process exits"
    },
    "browserServer.on('close')": {
        "prefix": "p-bs-on-close",
        "body": [
            "browserServer.on('close', () => {",
            "\t$0",
            "});"
        ],
        "description": "Emitted when the browser server is closed"
    },
    "page.$": {
        "prefix": "p-$",
        "body": "await this.page.$('$0');",
        "description": "Finds a matching element by a query selector within the page"
    },
    "page.$$": {
        "prefix": "p-$$",
        "body": "await this.page.$$('$0');",
        "description": "Finds all matching elements by a query selector within the page"
    },
    "page.$eval": {
        "prefix": "p-$eval",
        "body": [
            "await this.page.$eval('$2', element => {",
            "\t${3:console.log(element);}",
            "});"
        ],
        "description": "Finds a matching element by a query selector within the page and passes the result as the first argument to a function"
    },
    "page.$$eval": {
        "prefix": "p-$$eval",
        "body": [
            "await this.page.$$eval('$2', elements => {",
            "\t${3:console.log(elements);}",
            "});"
        ],
        "description": "Finds all matching elements by a query selector within the page and passes the results as the first argument to a function"
    },
    "page.bringToFront": {
        "prefix": "p-bringToFront",
        "body": "await this.page.bringToFront();",
        "description": "Actives the corresponding tab of the page"
    },
    "page.close": {
        "prefix": "p-close",
        "body": "await this.page.close();",
        "description": "Closes the page"
    },
    "page.content": {
        "prefix": "p-content",
        "body": "await this.page.content();",
        "description": "Returns the full HTML contents of the page"
    },
    "page.pdf": {
        "prefix": "p-pdf",
        "body": "await this.page.pdf({ path: '${2:page.pdf}', format: '${3|A4,Letter,Legal,Tabloid,Ledger,A0,A1,A2,A3,A5,A6|}' });",
        "description": "Generates a PDF from the page"
    },
    "page.press with options": {
        "prefix": "p-press",
        "body": "await this.page.press('$1', '${2:F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12|Backspace|Tab|Delete|Escape|Enter|PageUP|PageDown|ArrowUp|ArrowDown|ArrowLeft|ArrowRight}', fullPage: '${3|true,false|}' });",
        "description": "Focuses an element within the page and presses on a specific key"
    },
    "page.on('close')": {
        "prefix": "p-on-close",
        "body": [
            "page.on('close', () => {",
            "\t${0:console.log('Closed');}",
            "});"
        ],
        "description": "Emitted when the page is closed"
    },
    "page.on('console')": {
        "prefix": "p-on-console",
        "body": [
            "page.on('console', msg => {",
            "\t${0:console.log(msg.args());}",
            "});"
        ],
        "description": "Emitted when a script within the page calls one of console API methods"
    },
    "page.on('crash')": {
        "prefix": "p-on-crash",
        "body": [
            "page.on('crash', () => {",
            "\t${0:console.log('Crashed');}",
            "});"
        ],
        "description": "Emitted when the page crashes"
    },
    "page.on('dialog')": {
        "prefix": "p-on-dialog",
        "body": [
            "page.on('dialog', dialog => {",
            "\t${0:console.log(dialog.message());}",
            "});"
        ],
        "description": "Emitted when a dialog appears in the page"
    },
    "page.on('domcontentloaded')": {
        "prefix": "p-on-domcontentloaded",
        "body": [
            "page.on('domcontentloaded', () => {",
            "\t${0:console.log('DOMContentLoaded is dispatched');}",
            "});"
        ],
        "description": "Emitted when the `DOMContentLoaded` event of the page is dispatched"
    },
    "page.on('frameattached')": {
        "prefix": "p-on-frameattached",
        "body": [
            "page.on('frameattached', frame => {",
            "\t${0:console.log(frame.content());}",
            "});"
        ],
        "description": "Emitted when a frame within the page is attached"
    },
    "page.on('framedetached')": {
        "prefix": "p-on-framedetached",
        "body": [
            "page.on('framedetached', frame => {",
            "\t${0:console.log(frame.content());}",
            "});"
        ],
        "description": "Emitted when a frame within the page is detached"
    },
    "page.on('framenavigated')": {
        "prefix": "p-on-framenavigated",
        "body": [
            "page.on('framenavigated', frame => {",
            "\t${0:console.log(frame.content());}",
            "});"
        ],
        "description": "Emitted when a frame within the page is navigated to a new url"
    },
    "page.on('load')": {
        "prefix": "p-on-load",
        "body": [
            "page.on('load', () => {",
            "\t${0:console.log('Loaded');}",
            "});"
        ],
        "description": "Emitted when the `load` event of the page is dispatched"
    },
    "page.keyboard.press": {
        "prefix": "p-keyboard-press",
        "body": "await this.page.keyboard.press('$0');",
        "description": "Presses on a specific key within the page"
    },
    "page.keyboard.insertText": {
        "prefix": "p-keyboard-insertText",
        "body": "await this.page.keyboard.insertText('$0');",
        "description": "Dispatches an `input` event within the page"
    },
    "page.keyboard.up": {
        "prefix": "p-keyboard-up",
        "body": "await this.page.keyboard.up('$0');",
        "description": "Dispatches a `keyup` event within the page"
    },
    "page.mouse.click": {
        "prefix": "p-mouse-clk",
        "body": "await this.page.mouse.click(${2:0}, ${3:100});",
        "description": "Clicks on area within the page by coordinates"
    },
    "page.mouse.dblclick": {
        "prefix": "p-mouse-dbclk",
        "body": "await this.page.mouse.dblclick(${2:0}, ${3:100});",
        "description": "Clicks twice on area within the page by coordinates"
    },
    "page.mouse.down": {
        "prefix": "p-mouse-down",
        "body": "await this.page.mouse.down();",
        "description": "Dispatches a `mousedown` event within the page"
    },
    "page.mouse.move": {
        "prefix": "p-mouse-move",
        "body": "await this.page.mouse.move();",
        "description": "Dispatches a `mousemove` event within the page"
    },
    "page.mouse.up": {
        "prefix": "p-mouse-up",
        "body": "await this.page.mouse.up();",
        "description": "Dispatches a `mouseup` event within the page"
    },
    "page.on('pageerror')": {
        "prefix": "p-on-pageerror",
        "body": [
            "page.on('pageerror', error => {",
            "\t${0:console.log(error);}",
            "});"
        ],
        "description": "Emitted when an uncaught exception happens within the page"
    },
    "page.on('popup')": {
        "prefix": "p-on-popup",
        "body": [
            "page.on('popup', page => {",
            "\t${0:console.log(page.content());}",
            "});"
        ],
        "description": "Emitted when the page opens a new tab or window"
    },
    "page.on('request')": {
        "prefix": "p-on-request",
        "body": [
            "page.on('request', request => {",
            "\t${0:console.log(request.url());}",
            "});"
        ],
        "description": "Emitted when the request is issued by the page"
    },
    "page.on('requestfailed')": {
        "prefix": "p-on-requestfailed",
        "body": [
            "page.on('requestfailed', request => {",
            "\t${0:console.log(request.url());}",
            "});"
        ],
        "description": "Emitted when a request fails"
    },
    "page.on('requestfinished')": {
        "prefix": "p-on-requestfinished",
        "body": [
            "page.on('requestfailed', request => {",
            "\t${0:console.log(request.url());}",
            "});"
        ],
        "description": "Emitted when a request finishes successfully"
    },
    "page.on('response')": {
        "prefix": "p-on-response",
        "body": [
            "page.on('response', response => {",
            "\t${0:console.log(response.status());}",
            "});"
        ],
        "description": "Emitted when a response is received"
    },
    "page.on('worker')": {
        "prefix": "p-on-worker",
        "body": [
            "page.on('worker', worker => {",
            "\t${0:console.log(worker.url());}",
            "});"
        ],
        "description": "Emitted when a dedicated `WebWorker` is spawned by the page"
    },
    "expect.configure()": {
        "prefix": "p-config-expect",
        "body": [
            "const slowExpect = expect.configure({ timeout: 10000 });",
            "const softExpect = expect.configure({ soft: true });",
            "await slowExpect(${1:actual}).${2:assertionMethod};",
            "await softExpect(${3:actual}).${4:assertionMethod};"
        ],
        "description": "create pre-configured expect instance with its own defaults such as timeout and soft"
    },
    "Sample playwright test": {
        "prefix": "p-sample",
        "body": [
            "const { chromium } = require('playwright');",
            "",
            "(async () => {",
            "\tconst browser = await chromium.launch();",
            "\tconst page = await browser.newPage();",
            "",
            "\t$0",
            "",
            "\tawait browser.close();",
            "})();"
        ],
        "description": "Creates a basic usage example of a page"
    },
    "drag and drop example": {
        "prefix": "p-dragdrop-sample",
        "body": [
            "// Drags the mouse from a point",
            "await page.mouse.move($1);",
            "await page.mouse.down();",
            "",
            "// Drops the mouse to another point",
            "await page.mouse.move($2);",
            "await page.mouse.up();"
        ],
        "description": "Creates an example that drags the mouse from a point and drops it to another point"
    },
    "page.locator.filter": {
        "prefix": "p-locator-filter",
        "description": "Playwright page locator",
        "body": [
            "await this.page.locator('${1:selector}').filter({ ${2|hasNotText,hasNot|}: $3 });"
        ]
    }
}
