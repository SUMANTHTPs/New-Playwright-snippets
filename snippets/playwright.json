{
    "Playwright import": {
        "prefix": "m-imp",
        "description": "Imports Playwright's test libraries",
        "body": [
            "",
            "import { test } from '@playwright/test';",
            "import { Team } from '@paeng/playwright-teams-info';",
            "import {",
            "EnvironmentType,",
            "integrationTest,",
            "RunEnvironment,",
            "RunGeo,",
            "RunType,",
            "Severity,",
            "} from '@paeng/playwright-solution';",
            ""
        ]
    },
    "Playwright describe block": {
        "prefix": "p-td",
        "description": "Playwright describe block",
        "body": [
            "test.describe('$1', () => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test()": {
        "prefix": "p-t",
        "description": "Playwright test block",
        "body": [
            "test('$1', async ({ ${2:page} }) => {",
            "\t$3",
            "});",
            ""
        ]
    },
    "Playwright integrationTest block": {
        "prefix": "p-int",
        "description": "Playwright integrationTest wrapper function block",
        "body": [
            "integrationTest(",
            "    {",
            "      envTypes: [EnvironmentType.MakerShell],",
            "      runTypes: [RunType.Nightly],",
            "      runEnvironments: [[RunEnvironment.Test, Severity.S3]],",
            "      runGeos: [RunGeo.USA],",
            "    },",
            "    Team.${1|TableDesigner,ViewDesigner|},",
            "    '${2:title}',",
            "    async ({ page }) => {",
            "       ${3:testSteps}",
            "    });"
        ]
    },
    "test.step()": {
        "prefix": "p-ts",
        "description": "Playwright test.step block",
        "body": [
            "await test.step('${1:title}', async () => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.beforeEach()": {
        "prefix": "p-tbe",
        "description": "Playwright beforeEach block",
        "body": [
            "test.beforeEach(async ({ ${1:page} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.afterEach()": {
        "prefix": "p-tae",
        "description": "Playwright afterEach block",
        "body": [
            "test.afterEach(async ({ ${1:page} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.beforeAll()": {
        "prefix": "p-tba",
        "description": "Playwright beforeAll block",
        "body": [
            "test.beforeAll(async ({ ${1:browser} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "test.afterAll()": {
        "prefix": "p-taa",
        "description": "Playwright afterAll block",
        "body": [
            "test.afterAll(async ({ ${1:browser} }) => {",
            "\t$2",
            "});",
            ""
        ]
    },
    "page.click()": {
        "prefix": "p-clk",
        "body": "await this.page.locator('${0:selector}').click();",
        "description": "Clicks in the center of an element within the page"
    },
    "Click Selector": {
        "prefix": "m-clks",
        "description": "clicks selector util",
        "body": [
            "await clickSelector(this.page, ${1:selector});"
        ]
    },
    "page.dblclick()": {
        "prefix": "p-dbclk",
        "body": "await page.dblclick('$0');",
        "description": "Clicks twice in the center of an element within the page"
    },
    "page.nth().click()": {
        "prefix": "p-clki",
        "description": "clicks selector",
        "body": [
            "await this.page.locator(${1:selector}).nth(${2:index}).click();"
        ]
    },
    "precise click with index": {
        "prefix": "m-pclk",
        "description": "clicks selector util",
        "body": [
            "await preciseClick(this.page, ${1:selector}, { index: ${2:index} });"
        ]
    },
    "Navigate to Url": {
        "prefix": "m-ntu",
        "description": "navigates to the url util",
        "body": [
            "await navigateToUrl(this.page, ${1:url});"
        ]
    },
    "page.title()": {
        "prefix": "p-title",
        "description": "Returns the page's title",
        "body": [
            "await this.page.title();"
        ]
    },
    "Verify page url": {
        "prefix": "m-vpurl",
        "description": "Verify page url util",
        "body": [
            "await verifyPageURL(this.page, ${1:url});"
        ]
    },
    "page.url()": {
        "prefix": "p-url",
        "body": "await this.page.url();",
        "description": "Returns the page's URL"
    },
    "publicAsyncMethod()": {
        "prefix": "p-pam",
        "description": "Playwright asynchronous method for class",
        "body": [
            "public async ${1:name}($2) {$3}"
        ]
    },
    "page.toBeVisible()": {
        "prefix": "p-etbv",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeVisible();"
        ]
    },
    "page.toBeHidden()": {
        "prefix": "p-etbh",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeHidden();"
        ]
    },
    "page.toBeEnabled()": {
        "prefix": "p-etbe",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeEnabled();"
        ]
    },
    "page.toBeDisabled()": {
        "prefix": "p-etbd",
        "description": "Playwright expect to be visible",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeDisabled();"
        ]
    },
    "page.toBeChecked()": {
        "prefix": "p-etbc",
        "description": "Playwright expect to be checked",
        "body": [
            "await expect(this.page.locator(${1:selector})).toBeChecked();"
        ]
    },
    "expect.toBe()": {
        "prefix": "p-etb",
        "description": "Playwright expect something to be something",
        "body": [
            "expect($1).toBe($2);"
        ]
    },
    "page.waitFor()": {
        "prefix": "p-wf",
        "description": "Playwright wait for",
        "body": [
            "await this.page.locator(${1:selector}).waitFor($2);"
        ]
    },
    "page.waitForSelector()": {
        "prefix": "p-wfs",
        "description": "Playwright waitForSelector",
        "body": [
            "await this.page.waitForSelector(${0:selector});"
        ]
    },
    "page.waitForLoadState()": {
        "prefix": "p-wfls",
        "description": "Playwright waitForLoad",
        "body": [
            "await this.page.waitForLoadState();"
        ]
    },
    "page.waitForTimeout()": {
        "prefix": "p-wft",
        "description": "Playwright waitForTimeout",
        "body": [
            "await this.page.waitForTimeout(Timeout.$1);"
        ]
    },
    "A11y check": {
        "prefix": "m-a11y",
        "description": "Playwright a11y check util",
        "body": [
            "if (a11yCheck) {",
            "  await a11y(this.page);",
            "}"
        ]
    },
    "page.fill()": {
        "prefix": "p-fill",
        "description": "Playwright fill input",
        "body": [
            "await this.page.locator(${1:selector}).fill($2);"
        ]
    },
    "page.type()": {
        "prefix": "p-type",
        "description": "Playwright type input",
        "body": [
            "await this.page.locator(${1:selector}).type($2);"
        ]
    },
    "fill value in controls": {
        "prefix": "m-fill",
        "description": "Fill value in control util",
        "body": [
            "await fillValueInControl(this.page, ${1:inputSelector}, ${2:value});"
        ]
    },
    "page.isVisible()": {
        "prefix": "p-isv",
        "description": "Selector is visble?",
        "body": [
            "await this.page.locator(${1:selector}).isVisible();"
        ]
    },
    "page.isHidden()": {
        "prefix": "p-ish",
        "description": "Selector is hidden?",
        "body": [
            "await this.page.locator(${1:selector}).isHidden();"
        ]
    },
    "page.isChecked()": {
        "prefix": "p-isc",
        "description": "Selector is checked?",
        "body": [
            "await this.page.locator(${1:selector}).isChecked();"
        ]
    },
    "page.isEnabled()": {
        "prefix": "p-isen",
        "description": "Selector is enabled?",
        "body": [
            "await this.page.locator(${1:selector}).isEnabled();"
        ]
    },
    "page.isDisabled()": {
        "prefix": "p-isd",
        "description": "Selector is diabled?",
        "body": [
            "await this.page.locator(${1:selector}).isDisabled();"
        ]
    },
    "page.isEditable()": {
        "prefix": "p-ised",
        "description": "Selector is editable?",
        "body": [
            "await this.page.locator(${1:selector}).isEditable();"
        ]
    },
    "page.check()": {
        "prefix": "p-chk",
        "description": "Check the selector",
        "body": [
            "await this.page.locator(${1:selector}).check();"
        ]
    },
    "page.uncheck()": {
        "prefix": "p-uchk",
        "description": "Check the selector",
        "body": [
            "await this.page.locator(${1:selector}).uncheck();"
        ]
    },
    "Navigate to new page/tab": {
        "prefix": "p-newPage",
        "description": "Navigate to new tab",
        "body": [
            "const [${2:newPage}] = await Promise.all([",
            "\tcontext.waitForEvent('page'),",
            "\tpage.click(${1:selector})",
            "])",
            "await newPage.waitForLoadState();"
        ]
    },
    "Navigate to new popup": {
        "prefix": "p-newPopup",
        "description": "Navigate to new tab",
        "body": [
            "const [${2:newPopup}] = await Promise.all([",
            "\tthis.page.waitForEvent('popup'),",
            "\tthis.page.click(${1:selector})",
            "])",
            "await newPage.waitForLoadState();"
        ]
    },
    "page.getAttribute()": {
        "prefix": "p-getattr",
        "description": "Get values of element attribute",
        "body": [
            "await this.page.locator(${1:selector}).getAttribute('$2');"
        ]
    },
    "page.innerText()": {
        "prefix": "p-itxt",
        "description": "Get values of element inner text",
        "body": [
            "await this.page.locator(${1:selector}).innerText();"
        ]
    },
    "page.count()": {
        "prefix": "p-count",
        "description": "Get elements count",
        "body": [
            "await this.page.locator(${1:selector}).count();"
        ]
    },
    "test.use()": {
        "prefix": "p-tuse",
        "description": "test.use()",
        "body": [
            "test.use({ $0 });"
        ]
    },
    "browser.newContext()": {
        "prefix": "p-browser-newContext",
        "body": "const ${1:context} = await browser.newContext();",
        "description": "Creates a new browser context"
    },
    "browser.newPage()": {
        "prefix": "p-browser-newPage",
        "body": "const ${1:page} = await browser.newPage();",
        "description": "Creates a new page in a new browser context"
    },
    "context.newPage()": {
        "prefix": "p-context-newPage",
        "body": "const ${1:page} = await context.newPage();",
        "description": "Creates a new page in the browser context"
    },
    "context.pages()": {
        "prefix": "p-context-pages",
        "body": "await context.pages();",
        "description": "Returns all pages of the browser context"
    },
    "page.focus()": {
        "prefix": "p-focus",
        "body": "await page.focus('$0');",
        "description": "Focuses an element within the page"
    },
    "page.goBack()": {
        "prefix": "p-goBack",
        "body": "await page.goBack();",
        "description": "Navigates to the previous page in the history"
    },
    "page.goForward()": {
        "prefix": "p-goFwd",
        "body": "await page.goForward();",
        "description": "Navigates to the next page in the history"
    },
    "page.goto()": {
        "prefix": "p-goto",
        "body": "await page.goto('$0');",
        "description": "Navigates the page to a URL"
    },
    "POM Class": {
        "prefix": "m-pom",
        "description": "Playwright Page Object Model (POM) class structure",
        "body": [
            "import { Page } from '@playwright/test';",
            "",
            "import { navigateToUrl } from '@paeng/playwright-solution';",
            "",
            "export class ${1:ClassName} {",
            "  readonly page: Page;",
            "",
            "  constructor(page: Page) {",
            "    this.page = page;",
            "  }",
            "",
            "  public async ${2:methodName}() {}",
            "",
            "}"
        ]
    },
    "POM Class with extend class": {
        "prefix": "m-pome",
        "description": "Playwright Page Object Model (POM) class structure with extended class",
        "body": [
            "import { Page } from '@playwright/test';",
            "",
            "import { navigateToUrl } from '@paeng/playwright-solution';",
            "",
            "export class ${1:ClassName} extends ${2:extendClassName} {",
            "  constructor(page: Page) {",
            "    super(page);",
            "  }",
            "",
            "  public async ${3:methodName}() {}",
            "",
            "}"
        ]
    }
}